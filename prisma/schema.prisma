// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  approved
  pending
  rejected
}

model User {
  id String @id @default(uuid())
  email String @unique @db.VarChar(100)
  completeName String @db.VarChar(100)
  password String @db.VarChar(64)
  banner String?
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userData UserData?
  bodyMeasurements BodyMeasurement[]

  @@map("users")
  @@index([id, email])
}

model UserData {
  id String @id @default(uuid())
  gender String @db.VarChar(1)
  city String @db.VarChar(30)
  state String @db.VarChar(30)
  birth DateTime @db.Date
  goal String 
  activityLevel String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String @unique
  user User @relation(fields: [userId], references: [id])
  
  @@map("usersData")
  @@index([userId])
}

model BodyMeasurement {
  id String @id @default(uuid())
  height Decimal @db.Decimal(3, 2)
  weight Decimal @db.Decimal(4, 1)
  createdAt DateTime @default(now())

  userId String
  user User @relation(fields: [userId], references: [id])

  @@map("bodyMeasurements")
  @@index([userId, createdAt])
}

model FoodCategory {
  id String @id @default(uuid())
  name String @db.VarChar(20)
  banner String?
  description String @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  foodItem FoodItem[]

  @@map("foodCategories")
}

model Nutrient {
	id String @id @default(uuid())
  prot Decimal @db.Decimal(4,1)
  carb Decimal @db.Decimal(4,1)
  fat Decimal @db.Decimal(4,1)
  fibr Decimal @db.Decimal(4,1)
  createdAt DateTime @default(now()) 

  foodItemId String @unique
  foodItem FoodItem @relation(fields: [foodItemId], references: [id])

  @@map("nutrients")
  @@index([foodItemId])
}

model FoodItem {
	id String @id @default(uuid())
	name String @db.VarChar(30)
  banner String?
  kcal Decimal @db.Decimal(5,1)
  unity String
  visibleFat Boolean @db.Boolean
  publish Boolean @db.Boolean @default(false)// Se o usuário deseja tornar público
  public Boolean @db.Boolean @default(false)     // Se o admin aprovou como público
  status String @default("rejected")
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  nutrient Nutrient?
  foodItemRecipe FoodItemRecipe[]
  foodPrepMethod FoodPrepMethod[]
  foodItemMeal FoodItemMeal[]
  
  foodCategoryId String
  foodCategory FoodCategory @relation(fields: [foodCategoryId], references: [id])


  @@index([id, createdBy])
  @@map("foodItems")
}

model PrepMethod {
  id String @id @default(uuid())
  name String @db.VarChar(20)
  description String @db.VarChar(100)
  factorValueMin Int @db.SmallInt
  factorValueMax Int @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  foodPrepMethod FoodPrepMethod[]

  @@map("prepMethods")
}

model Recipe {
  id String @id @default(uuid())
  description String @db.Text
  banner String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  createdBy String

  foodItemRecipe FoodItemRecipe[]
  mealRecipe MealRecipe[]

  @@map("recipes")
}

model Meal {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  description String @db.VarChar(100)
  banner String?
  mealType Int @db.SmallInt

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  consumedOn DateTime @db.Date
  createdBy String

  foodItemMeal FoodItemMeal[]
  mealRecipe MealRecipe[]

  @@map("meals")
  @@index([createdBy, mealType])
}

//MANY-TO-MANY RELATIONS
model FoodItemRecipe {
  id String @id @default(uuid())
  quantity Int
  foodItemId String
  recipeId String

  foodItem FoodItem @relation(fields: [foodItemId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])


  @@map("foodItemRecipes")
}

model FoodPrepMethod {
  id String @id @default(uuid())

  adjustedKcal Decimal @db.Decimal(4,1)
  adjustedFat Decimal @db.Decimal(4,1)

  foodItemId String
  prepMethodId String


  foodItem FoodItem @relation(fields: [foodItemId], references: [id])
  prepMethod PrepMethod @relation(fields: [prepMethodId], references: [id])

  @@map("foodPrepMethods")
}

model FoodItemMeal {
  id String @id @default(uuid())

  mealId String
  foodItemId String

  foodItem FoodItem @relation(fields: [foodItemId], references: [id])
  meal Meal @relation(fields: [mealId], references: [id])

  @@map("foodItemsMeals")
}

model MealRecipe {
  id String @id @default(uuid())

  mealId String
  recipeId String

  meal Meal @relation(fields: [mealId], references: [id])
  recipe Recipe @relation(fields: [recipeId], references: [id])

  @@map("mealsRecipes")
}